@page "/account/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PhishyBank.Models
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using System.Globalization
@using PhishyBank.Data
@using PhishyBank.Server.Controllers

@inject BankContext bankContext
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>@PhishyLayoutComponentBase.getPageTitle("Dashboard")</PageTitle>

<div class="container pt-body">
    <h1 class="font-weight-bold">Hello, @currentUser.Name
    </h1>
    <br>
    <h3>Your Account Summary</h3>
    <hr>
    <h5>Account No. <b>
            @getAccountNumber()
        </b></h5>
    <h4>Balance Available: <b>
            @accountBalance
        </b></h4>
    <br>
    <h3>Recent Transactions</h3>
    <hr>
    <table id="transactionsTable" class="table table-striped table-bordered" style="width: 100%">
    </table>
</div>

@code {
    private User currentUser = new User
    {
        Id = -1,
        Email = "",
        Password = "",
        Name = ""
    };
    private Account userAccount = new Account
    {
        Id = -1,
        UserId = -1,
        Type = "Unknown",
        DateCreatedUtc = DateTime.UtcNow
    };
    private string accountBalance = "$0.00";
    private List<AccountTransaction> userTransactions = new List<AccountTransaction>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<IJSObjectReference>(
        "import", "./Pages/Account/Index.razor.js");

        // NOTE firstRender is true on page first load or refresh
        if (firstRender)
        {
            string? token = (await ProtectedSessionStore.GetAsync<string>("jwtToken")).Value;
            JwtSecurityToken? jwtToken = new JwtSecurityTokenHandler().ReadToken(token) as JwtSecurityToken;
            if (jwtToken != null)
            {
                // Console.WriteLine(JsonSerializer.Serialize(jwtToken));
                getUserData(jwtToken);
                getAccounts(jwtToken);
            }
        }
    }

    protected async void getUserData(JwtSecurityToken jwtToken)
    {
        var endpoint = new Uri(
        new Uri(NavManager.BaseUri), // base URI from current context
        $"/api/users/{jwtToken.Subject}" // address relative to the base URI, use / if needed
        ).ToString();
        var response = await Http.GetAsync(endpoint);

        // var test = await response.Content.ReadAsStringAsync();
        var contentStream = await response.Content.ReadAsStreamAsync();
        var deserializerOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var loggedInUser = await JsonSerializer.DeserializeAsync
        <User>(contentStream, deserializerOptions);

        if (loggedInUser != null)
        {
            currentUser = loggedInUser;
            //Console.WriteLine(JsonSerializer.Serialize(currentUser));
            this.StateHasChanged();
        }
    }

    protected async void getAccounts(JwtSecurityToken jwtToken)
    {
        var endpoint = new Uri(
        new Uri(NavManager.BaseUri),
        $"/api/users/{jwtToken.Subject}/accounts"
        ).ToString();
        var response = await Http.GetAsync(endpoint);

        var contentStream = await response.Content.ReadAsStreamAsync();
        var deserializerOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var accounts = await JsonSerializer.DeserializeAsync
        <List<Account>>(contentStream, deserializerOptions);
        // Console.WriteLine(JsonSerializer.Serialize(accounts));

        if (accounts != null)
        {
            // NOTE Assuming one user has only one account, for now...
            userAccount = accounts[0];
            accountBalance = getAccountBalance(userAccount);
            this.StateHasChanged();
        }
    }

    private async void getRecentTransactions(JwtSecurityToken jwtToken)
    {
        // NOTE Assuming one user has only one account, for now...
        var endpoint = new Uri(
        new Uri(NavManager.BaseUri),
        $"/api/users/{jwtToken.Subject}/transactions"
        ).ToString();
        var response = await Http.GetAsync(endpoint);

        var contentStream = await response.Content.ReadAsStreamAsync();
        var deserializerOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var recentTransactions = await JsonSerializer.DeserializeAsync
        <List<AccountTransaction>>(contentStream, deserializerOptions);
        Console.WriteLine(JsonSerializer.Serialize(recentTransactions));

        if (recentTransactions != null)
        {
            userTransactions = recentTransactions;
            this.StateHasChanged();
        }
    }

    private string getAccountNumber()
    {
        if (userAccount.Id == -1) return "";

        // Random _random = new Random();
        // return String.Format("1337-{0,8:00000000}-2022", _random.NextDouble() * Math.Pow(10, 8));

        return String.Format("1337-{0,8:00000000}-2022", userAccount.Id);
    }

    private string getAccountBalance(Account account)
    {
        if (account.Id == -1) return String.Format("{0:C2}", CultureInfo.CreateSpecificCulture("en-SG"));

        var balance = bankContext.AccountTransactions.Where(s => s.UserId == account.Id)
        .Sum(o => o.Amount);

        return balance.ToString("C2", CultureInfo.CreateSpecificCulture("en-SG"));
    }
}