@layout PhishyBankStateContainer
@page "/account/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PhishyBank.Models
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using System.Globalization
@using PhishyBank.Data
@using PhishyBank.Server.Controllers
@using PhishyBank.Server.State

@inject BankContext bankContext
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@inject HttpClient Http
@inject StateHelper StateHelper
@inject IJSRuntime JS

<PageTitle>@PhishyLayoutComponentBase.getPageTitle("Dashboard")</PageTitle>

<div class="container pt-body">
    <h1 class="font-weight-bold">
        Hello, @_Parent.PhishyUser.Name
    </h1>
    <br>
    <h3>Your Account Summary</h3>
    <hr>
    <h5>
        Account No. <b>
            @getAccountNumber()
        </b>
    </h5>
    <h4>
        Balance Available: <b>
            @accountBalance
        </b>
    </h4>
    <br>
    <h3>Recent Transactions</h3>
    <hr>
    <table id="transactionsTable" class="table table-striped table-bordered" style="width: 100%">
    </table>
</div>

@code {
    private Account userAccount = new Account
        {
            Id = -1,
            UserId = -1,
            Type = "Unknown",
            DateCreatedUtc = DateTime.UtcNow
        };

    private string accountBalance = "$0.00";
    private List<AccountTransaction> userTransactions = new List<AccountTransaction>();
    
    [CascadingParameter]
    private PhishyBankStateContainer _Parent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<IJSObjectReference>(
        "import", "./Pages/Account/Index.razor.js");

        // NOTE firstRender is true on page first load or refresh
        if (firstRender)
        {
            userAccount = (await StateHelper.GetAccounts())[0];
            this.StateHasChanged();
        }
    }

    private async void getRecentTransactions(JwtSecurityToken jwtToken)
    {
        // NOTE Assuming one user has only one account, for now...
        var endpoint = new Uri(
        new Uri(NavManager.BaseUri),
        $"/api/users/{jwtToken.Subject}/transactions"
        ).ToString();
        var response = await Http.GetAsync(endpoint);

        var contentStream = await response.Content.ReadAsStreamAsync();
        var deserializerOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
        var recentTransactions = await JsonSerializer.DeserializeAsync
        <List<AccountTransaction>>(contentStream, deserializerOptions);
        Console.WriteLine(JsonSerializer.Serialize(recentTransactions));

        if (recentTransactions != null)
        {
            userTransactions = recentTransactions;
        }
    }

    private string getAccountNumber()
    {
        if (userAccount.Id == -1) return "";

        // Random _random = new Random();
        // return String.Format("1337-{0,8:00000000}-2022", _random.NextDouble() * Math.Pow(10, 8));

        return String.Format("1337-{0,8:00000000}-2022", userAccount.Id);
    }

    private string getAccountBalance(Account account)
    {
        if (account.Id == -1) return String.Format("{0:C2}", CultureInfo.CreateSpecificCulture("en-SG"));

        var balanceCredit = bankContext.AccountTransactions.Where(s => s.UserId == account.Id)
        .Where(s => Convert.ToInt32(s.AccountIdTarget) == account.Id)
        .Sum(o => o.Amount);
        var balanceDebit = bankContext.AccountTransactions.Where(s => s.UserId == account.Id)
        .Where(s => Convert.ToInt32(s.AccountIdSource) == account.Id)
        .Sum(o => o.Amount);

        return (balanceCredit - balanceDebit).ToString("C2", CultureInfo.CreateSpecificCulture("en-SG"));
    }
}