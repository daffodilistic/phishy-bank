@page "/account/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.IdentityModel.Tokens.Jwt;
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>@PhishyLayoutComponentBase.getPageTitle("Dashboard")</PageTitle>

<div class="container pt-body">
    <h1 class="font-weight-bold">Hello, @username
    </h1>
    <br>
    <h3>Your Account Summary</h3>
    <hr>
    <h5>Account No. <b>
            @* <asp:Label ID="lblAccountId" runat="server" Text="62353535"></asp:Label> *@
        </b></h5>
    <h4>Balance Available: <b>
            @* <asp:Label ID="lblAccountBalance" runat="server" Text="$18.88"></asp:Label> *@
        </b></h4>
    <br>
    <h3>Recent Transactions</h3>
    <hr>
    <table id="transactionsTable" class="table table-striped table-bordered" style="width: 100%">
    </table>
</div>
@* <script type="text/javascript">
    jQuery(document).ready(($) => {
    var table = $("#transactionsTable").DataTable({
    sDom: "rtip",
    lengthChange: false,
    info: false,
    ordering: false,
    scrollY: true,
    scrollX: true,
    searching: false,
    serverSide: true,
    processing: true,
    ajax: {
    url: "transactions.ashx",
    //dataSrc: (json) => {
    //var returnData = new Array();
    //for (var i = 0; i < json.data.length; i++) {
    // var transaction = json.data[i];
    // returnData.push({
    // updated_at: transaction.updated_at,
    // amount: transaction.amount,
    // currency: transaction.currency,
    // receiver: transaction.receiver,
    // subject: transaction.subject
    // })
    //}
    //console.log("returnData is");
    //console.log(returnData);
    //return returnData;
    //}
    },
    columns: [
    {
    title: "Date",
    data: "updated_at",
    render: (data, type, row) => {
    var DateTime = luxon.DateTime;
    var readableTime = DateTime.fromISO(data).toLocaleString(DateTime.DATETIME_FULL);
    // Apparently Fidor stores time in UTC timezone...
    return readableTime;
    }
    },
    {
    title: "Amount",
    data: "amount",
    render: (data, type, row) => {
    var formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: row.currency,
    });

    return formatter.format(data / 100);
    }
    },
    {
    title: "Receiver",
    data: "receiver",
    render: (data, type, row) => {
    if (validate.single(data, { email: true }) == undefined) {
    return "<a href='mailto:" + data + "'>" + data + "</a>";
    } else {
    return row.recipient_name;
    }
    }
    },
    { title: "Message", data: "subject" }
    ]
    });
    });

    </script> *@

@code {
    private string username;

    protected override async Task OnInitializedAsync()
    {
        string token = (await ProtectedSessionStore.GetAsync<string>("jwtToken")).Value ?? "";
        JwtSecurityToken jwtToken = new JwtSecurityTokenHandler().ReadToken(token) as JwtSecurityToken;
        Console.WriteLine(jwtToken.Subject);
        username = jwtToken.Subject;
    }
}