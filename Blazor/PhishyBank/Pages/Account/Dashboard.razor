@page "/account/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PhishyBank.Models
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt

@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@inject HttpClient Http

<PageTitle>@PhishyLayoutComponentBase.getPageTitle("Dashboard")</PageTitle>

<div class="container pt-body">
    <h1 class="font-weight-bold">Hello, @currentUser.Name
    </h1>
    <br>
    <h3>Your Account Summary</h3>
    <hr>
    <h5>Account No. <b>
            @getAccountNumber()
        </b></h5>
    <h4>Balance Available: <b>
            @* <asp:Label ID="lblAccountBalance" runat="server" Text="$18.88"></asp:Label> *@
        </b></h4>
    <br>
    <h3>Recent Transactions</h3>
    <hr>
    <table id="transactionsTable" class="table table-striped table-bordered" style="width: 100%">
    </table>
</div>
@* <script type="text/javascript">
    jQuery(document).ready(($) => {
    var table = $("#transactionsTable").DataTable({
    sDom: "rtip",
    lengthChange: false,
    info: false,
    ordering: false,
    scrollY: true,
    scrollX: true,
    searching: false,
    serverSide: true,
    processing: true,
    ajax: {
    url: "transactions.ashx",
    //dataSrc: (json) => {
    //var returnData = new Array();
    //for (var i = 0; i < json.data.length; i++) {
    // var transaction = json.data[i];
    // returnData.push({
    // updated_at: transaction.updated_at,
    // amount: transaction.amount,
    // currency: transaction.currency,
    // receiver: transaction.receiver,
    // subject: transaction.subject
    // })
    //}
    //console.log("returnData is");
    //console.log(returnData);
    //return returnData;
    //}
    },
    columns: [
    {
    title: "Date",
    data: "updated_at",
    render: (data, type, row) => {
    var DateTime = luxon.DateTime;
    var readableTime = DateTime.fromISO(data).toLocaleString(DateTime.DATETIME_FULL);
    // Apparently Fidor stores time in UTC timezone...
    return readableTime;
    }
    },
    {
    title: "Amount",
    data: "amount",
    render: (data, type, row) => {
    var formatter = new Intl.NumberFormat("en-SG", {
    style: "currency",
    currency: row.currency,
    });

    return formatter.format(data / 100);
    }
    },
    {
    title: "Receiver",
    data: "receiver",
    render: (data, type, row) => {
    if (validate.single(data, { email: true }) == undefined) {
    return "<a href='mailto:" + data + "'>" + data + "</a>";
    } else {
    return row.recipient_name;
    }
    }
    },
    { title: "Message", data: "subject" }
    ]
    });
    });

    </script> *@

@code {
    private User currentUser = new User
    {
        Id = -1,
        Email = "",
        Password = "",
        Name = ""
    };
    private Account userAccount = new Account
    {
        Id = -1,
        UserId = -1,
        Type = "Unknown",
        DateCreatedUtc = DateTime.UtcNow
    };

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // NOTE firstRender is true on page first load or refresh
        if (firstRender)
        {
            string? token = (await ProtectedSessionStore.GetAsync<string>("jwtToken")).Value;
            JwtSecurityToken? jwtToken = new JwtSecurityTokenHandler().ReadToken(token) as JwtSecurityToken;
            if (jwtToken != null)
            {
                // Console.WriteLine(JsonSerializer.Serialize(jwtToken));
                getUserData(jwtToken);
                getAccounts(jwtToken);
            }
        }
    }

    protected async void getUserData(JwtSecurityToken jwtToken)
    {
        var endpoint = new Uri(
        new Uri(NavManager.BaseUri), // base URI from current context
        $"/api/users/{jwtToken.Subject}" // address relative to the base URI, use / if needed
        ).ToString();
        var response = await Http.GetAsync(endpoint);

        // var test = await response.Content.ReadAsStringAsync();
        var contentStream = await response.Content.ReadAsStreamAsync();
        var deserializerOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var loggedInUser = await JsonSerializer.DeserializeAsync
        <User>(contentStream, deserializerOptions);

        if (loggedInUser != null)
        {
            currentUser = loggedInUser;
            //Console.WriteLine(JsonSerializer.Serialize(currentUser));
            this.StateHasChanged();
        }
    }

    protected async void getAccounts(JwtSecurityToken jwtToken)
    {
        var endpoint = new Uri(
        new Uri(NavManager.BaseUri), // base URI from current context
        $"/api/users/{jwtToken.Subject}/accounts" // address relative to the base URI, use / if needed
        ).ToString();
        var response = await Http.GetAsync(endpoint);

        // var test = await response.Content.ReadAsStringAsync();
        var contentStream = await response.Content.ReadAsStreamAsync();
        var deserializerOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var accounts = await JsonSerializer.DeserializeAsync
        <List<Account>>(contentStream, deserializerOptions);
        // Console.WriteLine(JsonSerializer.Serialize(accounts));

        if (accounts != null)
        {
            // NOTE Assuming one user has only one account, for now...
            userAccount = accounts[0];
            this.StateHasChanged();
        }
    }

    private string getAccountNumber()
    {
        if (userAccount.Id == -1) return "";

        // Random _random = new Random();
        // return String.Format("1337-{0,8:00000000}-2022", _random.NextDouble() * Math.Pow(10, 8));

        return String.Format("1337-{0,8:00000000}-2022", userAccount.Id);
    }
}